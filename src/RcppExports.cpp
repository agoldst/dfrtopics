// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// jsdiv_v
double jsdiv_v(NumericVector P, NumericVector Q);
RcppExport SEXP _dfrtopics_jsdiv_v(SEXP PSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(jsdiv_v(P, Q));
    return rcpp_result_gen;
END_RCPP
}
// jsdiv_m
NumericMatrix jsdiv_m(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _dfrtopics_jsdiv_m(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(jsdiv_m(x, y));
    return rcpp_result_gen;
END_RCPP
}
// naive_cluster
List naive_cluster(NumericVector D, IntegerVector K, double threshold);
RcppExport SEXP _dfrtopics_naive_cluster(SEXP DSEXP, SEXP KSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(naive_cluster(D, K, threshold));
    return rcpp_result_gen;
END_RCPP
}
// naive_cluster_width
NumericVector naive_cluster_width(std::vector<std::vector<int> > cl, NumericVector D);
RcppExport SEXP _dfrtopics_naive_cluster_width(SEXP clSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type cl(clSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(naive_cluster_width(cl, D));
    return rcpp_result_gen;
END_RCPP
}
// calc_row_entropies
NumericVector calc_row_entropies(const Eigen::MappedSparseMatrix<double> m);
RcppExport SEXP _dfrtopics_calc_row_entropies(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_row_entropies(m));
    return rcpp_result_gen;
END_RCPP
}
// entropy
double entropy(NumericVector x);
RcppExport SEXP _dfrtopics_entropy(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy(x));
    return rcpp_result_gen;
END_RCPP
}
// draw_multinom
List draw_multinom(const IntegerVector nn, const NumericVector probs);
RcppExport SEXP _dfrtopics_draw_multinom(SEXP nnSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_multinom(nn, probs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dfrtopics_jsdiv_v", (DL_FUNC) &_dfrtopics_jsdiv_v, 2},
    {"_dfrtopics_jsdiv_m", (DL_FUNC) &_dfrtopics_jsdiv_m, 2},
    {"_dfrtopics_naive_cluster", (DL_FUNC) &_dfrtopics_naive_cluster, 3},
    {"_dfrtopics_naive_cluster_width", (DL_FUNC) &_dfrtopics_naive_cluster_width, 2},
    {"_dfrtopics_calc_row_entropies", (DL_FUNC) &_dfrtopics_calc_row_entropies, 1},
    {"_dfrtopics_entropy", (DL_FUNC) &_dfrtopics_entropy, 1},
    {"_dfrtopics_draw_multinom", (DL_FUNC) &_dfrtopics_draw_multinom, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dfrtopics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
