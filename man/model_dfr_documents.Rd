% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model_dfr_documents}
\alias{model_dfr_documents}
\title{Make a topic model of DfR documents}
\usage{
model_dfr_documents(citations_files, wordcounts_dirs, n_topics,
  stoplist_file = file.path(path.package("dfrtopics"), "stoplist",
  "stoplist.txt"), ...)
}
\arguments{
\item{citations_files}{character vector with names of DfR
\code{citations.CSV} or \code{citations.tsv} metadata files files}

\item{wordcounts_dirs}{character vector with names of directories holding
\code{wordcounts*.CSV} files}

\item{n_topics}{number of topics to model}

\item{stoplist_file}{name of stoplist file (containing one stopword per line)}

\item{...}{passed on to \code{\link{train_model}}}
}
\value{
a \code{\link{mallet_model}} object holding the results
}
\description{
The basic usage of this package is wrapped up in this convenience function.
}
\details{
Given wordcount and metadata files, this function sets up MALLET inputs and
then runs MALLET to produce a topic model. Normally you will want
finer-grained control over the mallet inputs and modeling parameters. The
steps for that process are described in the package vignette. Once the model
has been trained, the results can be saved to disk with
\code{\link{write_mallet_model}}

If java gives out-of-memory errors, try increasing the Java heap size to a
large value, like 4GB, by setting \code{options(java.parameters="-Xmx4g")}
\emph{before} loading this package (or rJava).
}
\examples{
# Make a 50-topic model of documents in the wordcounts folder
\dontrun{model_dfr_documents("citations.CSV", "wordcounts", 50)}

}
\seealso{
This function simply calls in sequence
  \code{\link{read_dfr_metadata}}, \code{\link{read_wordcounts}},
  \code{\link{wordcounts_texts}}, \code{\link{make_instances}}, and
  \code{\link{train_model}}. To write results to disk, use
  \code{\link{write_mallet_model}}
}
