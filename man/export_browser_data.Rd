% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/browser_export.R
\name{export_browser_data}
\alias{export_browser_data}
\title{Output data files for dfr-browser}
\usage{
export_browser_data(m, out_dir, zipped = TRUE, n_top_words = 50,
  n_scaled_words = 1000, supporting_files = FALSE, overwrite = FALSE,
  internalize = FALSE, info = NULL, proper = FALSE,
  digits = getOption("digits"), permute = NULL,
  metadata_header = FALSE)
}
\arguments{
\item{m}{\code{mallet_model} object from \code{\link{train_model}} or
\code{\link{load_mallet_model}}}

\item{out_dir}{directory for output. If \code{supporting_files} is TRUE, the
exported data files will go in a \code{"data"} directory under
\code{out_dir}.}

\item{zipped}{should the larger data files be zipped? (If TRUE, uses
\code{\link[utils]{zip}}, which requires the \code{zip} utility be
available.)}

\item{n_top_words}{how many top words per topic to save?}

\item{n_scaled_words}{how many word types to use in scaled coordinates
calculation?}

\item{supporting_files}{if TRUE (FALSE is default), all the files
needed to run the browser are copied to \code{out_dir}, with the
exported data placed appropriately. From a shell in \code{out_dir},
run \code{bin/server} to launch a local web server.}

\item{overwrite}{if TRUE, this will clobber existing files}

\item{internalize}{always set to FALSE. If TRUE, model data is in the
browser home page rather than separate files, but this behavior is
deprecated. See Details.}

\item{info}{a list of dfr-browser parameters. Converted to JSON with
\code{\link[jsonlite]{toJSON}} and stored in \code{info.json}. If omitted,
default values (\code{getOption("dfrtopics.browser_info")}) are used. No
file is written if \code{info=FALSE}.}

\item{proper}{if TRUE, the document-topic and topic-word matrices will be
smoothed by the hyperparameters alpha and beta (respectively) and normalized
before export, instead of the "raw" sampling weights (which is the default).
For MALLET models, moothed and normalized weights then give the maximum a
posteriori estimates of the corresponding probabilities, which is "properly"
what the modeling process yields (but may disguise the effects of variations
in document length---and increase the storage space required).}

\item{digits}{if \code{proper} is TRUE, probabilities are rounded to this
decimal place, yielding a somewhat sparser doc-topics matrix (the topic-word
matrix is more aggressively truncated anyway). Set to NULL for no rounding.
Rounded weights are renormalized within dfr-browser itself.}

\item{permute}{if non-NULL, specifies a renumbering of the topics: the new
topic \code{k} is old topic \code{permute[k]}. (If you have the inverse, use
\code{\link{order}(permute)} to invert it back.)}

\item{metadata_header}{if TRUE (FALSE is default), the exported metadata CSV
will have a header row (not expected by dfr-browser by default)}
}
\description{
Transform and save modeling results in a format suitable for use by
\href{http://agoldst.github.io/dfr-browser}{dfr-browser}, the web-browser
based model browser. For a quick export and immediate viewing, see also
\code{\link{dfr_browser}}.
}
\details{
This routine reports on its progress. By default, it saves zipped versions of
the document-topics matrix and metadata files; dfr-browser supports
client-side unzipping. This function compresses files using R's
\code{\link{zip}} command. If that fails, set \code{zipped=F} (and, if you
wish, zip the files using another program).

A detailed description of the output files can be found in the dfr-browser
technical notes at \url{http://github.com/agoldst/dfr-browser}.

This package includes a copy of the dfr-browser files necessary to run the
browser. By default, this routine only exports data files. To also copy
over the dfr-browser source (javascript, HTML, and CSS), pass
\code{supporting_files=T}.
}
\section{Metadata format}{


If you are working with non-JSTOR documents, the one file that will reflect
this is the exported metadata. dfr-browser expects seven metadata columns by default:
\code{id,title,author,journaltitle,volume,issue,pubdate,pagerange}. This
function looks for these seven columns and, if it finds them, writes the
metadata with these columns in this order. Any remaining columns are pushed
all the way to the right of the output. (dfr-browser ignores them unless you
customize it.) If any these columns is not present in \code{metadata(m)},
then \code{export_browser_data} will simply save all the metadata as is,
adjusting only the CSV format to match the baseline expectation of
dfr-browser (namely, a headerless CSV conforming to
\href{http://tools.ietf.org/html/rfc4180}{RFC 4180}.).

If your metadata does not match these expectations, an alternative is to set
dfr-browser's configuration parameters \code{VIS.metadata.type} and
\code{VIS.bib.type} to "base" (using the \code{info} parameter) and to write
out a metadata file \emph{with} a header by passing \code{metadata_header=T}
to this function or \code{\link{dfr_browser}}. For polished results more
customization of dfr-browser might be necessary.

Note that you can adjust the metadata held on the model object by assigning
to \code{metadata(m)} before exporting the browser data. In particular, if
you have many documents, you may wish to conserve space by eliminating
metadata columns that are not used by the visualization: for example,
\code{metadata(m)$publisher <- NULL}. Earlier versions of dfrtopics tried to
eliminate such columns automatically, but this more conservative approach
aims to allow you more flexibility about what gets exported.
}

\section{Deprecated option}{


To insert the data directly into the main \code{index.html} file, pass
\code{internalize=T}. This behavior is now deprecated and will be removed
in a future version.
}

\examples{

\dontrun{
m <- model_dfr_documents("citations.CSV", "wordcounts",
    "stoplist.txt", n_topics=40)

# export all files needed for browser program
export_browser_data(m, out_dir="browser", supporting_files=T)

# or: overwrite model data only for an already-existing browser
export_browser_data(m, out_dir="browser/data",
    supporting_files=F, overwrite=T)
}

}
\seealso{
\code{\link{dfr_browser}}, \code{\link{model_dfr_documents}},
\code{\link{train_model}}, \code{\link{topic_scaled_2d}}, and the functions
for outputting individual custom files:
\code{\link{export_browser_topic_words}},
\code{\link{export_browser_doc_topics}},
\code{\link{export_browser_metadata}},
\code{\link{export_browser_topic_scaled}},
\code{\link{export_browser_info}}.
}
