% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dfr_docs.R
\name{wordcounts_texts}
\alias{wordcounts_texts}
\title{Convert long-format word-counts into documents}
\usage{
wordcounts_texts(counts, shuffle = FALSE, sep = " ")
}
\arguments{
\item{counts}{long-format data frame like that returned by
\code{\link{read_wordcounts}}}

\item{shuffle}{if \code{TRUE}, randomize word order within document before
pasting it together. \code{FALSE} by default.}

\item{sep}{word separator in inflated bags. A space, by default.}
}
\value{
a dataframe with two columns: \code{id}, the document id;
  \code{text}, the full document text as a single line (with the words in
  meaningless order)
}
\description{
This naively "inflates" word counts into a bag of words, for sending to
MALLET.
}
\details{
You can directly pass the result from \code{link{read_wordcounts}} to this
function, but normally you'll want to filter or otherwise manipulate the
words first.

It is not straightforward to supply feature vectors directly to MALLET;
MALLET really wants to featurize each text itself. So our task is to take the
wordcounts supplied from DfR and reassemble the texts. If DfR tells us word w
occurs N times, we simply paste N copies of w together, separated by spaces
(or the value of \code{sep} if given). Though LDA should not care about word
order, if you are nervous about the effects of the decidedly non-natural
ordering of words this produces on the modeling process, you can randomize
the word order (it still won't be natural). Thanks to David Mimno for
suggesting this via his own \code{\link[mallet]{mallet}} code.

A big waste of memory, but this is the simple way to get DfR files into
MALLET.
}
\seealso{
\code{\link{read_wordcounts}}
}
